# coding: utf-8

"""
    Object Storage Interoperability Services API

    This is VMware Cloud Director Object Storage Interoperability Services API. Once storage platform vendor implements REST APIs complying with this specification, Object Storage Extension can integrate with the platform without coding effort.  # noqa: E501

    The version of the OpenAPI document: 1.0.0-oas3
    Contact: wachen@vmware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class OsisS3CapabilitiesExclusions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'by_params': 'list[str]',
        'by_headers': 'list[str]',
        'by_payload': 'list[str]'
    }

    attribute_map = {
        'by_params': 'by_params',
        'by_headers': 'by_headers',
        'by_payload': 'by_payload'
    }

    def __init__(self, by_params=None, by_headers=None, by_payload=None, local_vars_configuration=None):  # noqa: E501
        """OsisS3CapabilitiesExclusions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._by_params = None
        self._by_headers = None
        self._by_payload = None
        self.discriminator = None

        if by_params is not None:
            self.by_params = by_params
        if by_headers is not None:
            self.by_headers = by_headers
        if by_payload is not None:
            self.by_payload = by_payload

    @property
    def by_params(self):
        """Gets the by_params of this OsisS3CapabilitiesExclusions.  # noqa: E501


        :return: The by_params of this OsisS3CapabilitiesExclusions.  # noqa: E501
        :rtype: list[str]
        """
        return self._by_params

    @by_params.setter
    def by_params(self, by_params):
        """Sets the by_params of this OsisS3CapabilitiesExclusions.


        :param by_params: The by_params of this OsisS3CapabilitiesExclusions.  # noqa: E501
        :type: list[str]
        """

        self._by_params = by_params

    @property
    def by_headers(self):
        """Gets the by_headers of this OsisS3CapabilitiesExclusions.  # noqa: E501


        :return: The by_headers of this OsisS3CapabilitiesExclusions.  # noqa: E501
        :rtype: list[str]
        """
        return self._by_headers

    @by_headers.setter
    def by_headers(self, by_headers):
        """Sets the by_headers of this OsisS3CapabilitiesExclusions.


        :param by_headers: The by_headers of this OsisS3CapabilitiesExclusions.  # noqa: E501
        :type: list[str]
        """

        self._by_headers = by_headers

    @property
    def by_payload(self):
        """Gets the by_payload of this OsisS3CapabilitiesExclusions.  # noqa: E501


        :return: The by_payload of this OsisS3CapabilitiesExclusions.  # noqa: E501
        :rtype: list[str]
        """
        return self._by_payload

    @by_payload.setter
    def by_payload(self, by_payload):
        """Sets the by_payload of this OsisS3CapabilitiesExclusions.


        :param by_payload: The by_payload of this OsisS3CapabilitiesExclusions.  # noqa: E501
        :type: list[str]
        """

        self._by_payload = by_payload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OsisS3CapabilitiesExclusions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OsisS3CapabilitiesExclusions):
            return True

        return self.to_dict() != other.to_dict()
