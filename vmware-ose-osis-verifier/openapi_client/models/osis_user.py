# coding: utf-8

"""
    Object Storage Interoperability Services API

    This is VMware Cloud Director Object Storage Interoperability Services API. Once storage platform vendor implements REST APIs complying with this specification, Object Storage Extension can integrate with the platform without coding effort.  # noqa: E501

    The version of the OpenAPI document: 1.0.0-oas3
    Contact: wachen@vmware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class OsisUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_id': 'str',
        'canonical_user_id': 'str',
        'tenant_id': 'str',
        'active': 'bool',
        'username': 'str',
        'email': 'str',
        'role': 'str',
        'cd_user_id': 'str',
        'cd_tenant_id': 'str'
    }

    attribute_map = {
        'user_id': 'user_id',
        'canonical_user_id': 'canonical_user_id',
        'tenant_id': 'tenant_id',
        'active': 'active',
        'username': 'username',
        'email': 'email',
        'role': 'role',
        'cd_user_id': 'cd_user_id',
        'cd_tenant_id': 'cd_tenant_id'
    }

    def __init__(self, user_id=None, canonical_user_id=None, tenant_id=None, active=None, username=None, email=None, role=None, cd_user_id=None, cd_tenant_id=None, local_vars_configuration=None):  # noqa: E501
        """OsisUser - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._user_id = None
        self._canonical_user_id = None
        self._tenant_id = None
        self._active = None
        self._username = None
        self._email = None
        self._role = None
        self._cd_user_id = None
        self._cd_tenant_id = None
        self.discriminator = None

        self.user_id = user_id
        self.canonical_user_id = canonical_user_id
        self.tenant_id = tenant_id
        self.active = active
        if username is not None:
            self.username = username
        if email is not None:
            self.email = email
        if role is not None:
            self.role = role
        self.cd_user_id = cd_user_id
        self.cd_tenant_id = cd_tenant_id

    @property
    def user_id(self):
        """Gets the user_id of this OsisUser.  # noqa: E501

        user id  # noqa: E501

        :return: The user_id of this OsisUser.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this OsisUser.

        user id  # noqa: E501

        :param user_id: The user_id of this OsisUser.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def canonical_user_id(self):
        """Gets the canonical_user_id of this OsisUser.  # noqa: E501

        canonical user id  # noqa: E501

        :return: The canonical_user_id of this OsisUser.  # noqa: E501
        :rtype: str
        """
        return self._canonical_user_id

    @canonical_user_id.setter
    def canonical_user_id(self, canonical_user_id):
        """Sets the canonical_user_id of this OsisUser.

        canonical user id  # noqa: E501

        :param canonical_user_id: The canonical_user_id of this OsisUser.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and canonical_user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `canonical_user_id`, must not be `None`")  # noqa: E501

        self._canonical_user_id = canonical_user_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this OsisUser.  # noqa: E501

        id of the tenant which the user belongs to  # noqa: E501

        :return: The tenant_id of this OsisUser.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this OsisUser.

        id of the tenant which the user belongs to  # noqa: E501

        :param tenant_id: The tenant_id of this OsisUser.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and tenant_id is None:  # noqa: E501
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def active(self):
        """Gets the active of this OsisUser.  # noqa: E501

        user status  # noqa: E501

        :return: The active of this OsisUser.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this OsisUser.

        user status  # noqa: E501

        :param active: The active of this OsisUser.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and active is None:  # noqa: E501
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def username(self):
        """Gets the username of this OsisUser.  # noqa: E501

        username mapped with Cloud Director username  # noqa: E501

        :return: The username of this OsisUser.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this OsisUser.

        username mapped with Cloud Director username  # noqa: E501

        :param username: The username of this OsisUser.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def email(self):
        """Gets the email of this OsisUser.  # noqa: E501

        user email  # noqa: E501

        :return: The email of this OsisUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OsisUser.

        user email  # noqa: E501

        :param email: The email of this OsisUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def role(self):
        """Gets the role of this OsisUser.  # noqa: E501

        user role  # noqa: E501

        :return: The role of this OsisUser.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this OsisUser.

        user role  # noqa: E501

        :param role: The role of this OsisUser.  # noqa: E501
        :type: str
        """
        allowed_values = ["PROVIDER_ADMIN", "TENANT_ADMIN", "TENANT_USER", "ANONYMOUS", "UNKNOWN"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and role not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def cd_user_id(self):
        """Gets the cd_user_id of this OsisUser.  # noqa: E501

        Cloud Director user id  # noqa: E501

        :return: The cd_user_id of this OsisUser.  # noqa: E501
        :rtype: str
        """
        return self._cd_user_id

    @cd_user_id.setter
    def cd_user_id(self, cd_user_id):
        """Sets the cd_user_id of this OsisUser.

        Cloud Director user id  # noqa: E501

        :param cd_user_id: The cd_user_id of this OsisUser.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cd_user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `cd_user_id`, must not be `None`")  # noqa: E501

        self._cd_user_id = cd_user_id

    @property
    def cd_tenant_id(self):
        """Gets the cd_tenant_id of this OsisUser.  # noqa: E501

        id of Cloud Director tenant which the user belongs to  # noqa: E501

        :return: The cd_tenant_id of this OsisUser.  # noqa: E501
        :rtype: str
        """
        return self._cd_tenant_id

    @cd_tenant_id.setter
    def cd_tenant_id(self, cd_tenant_id):
        """Sets the cd_tenant_id of this OsisUser.

        id of Cloud Director tenant which the user belongs to  # noqa: E501

        :param cd_tenant_id: The cd_tenant_id of this OsisUser.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cd_tenant_id is None:  # noqa: E501
            raise ValueError("Invalid value for `cd_tenant_id`, must not be `None`")  # noqa: E501

        self._cd_tenant_id = cd_tenant_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OsisUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OsisUser):
            return True

        return self.to_dict() != other.to_dict()
