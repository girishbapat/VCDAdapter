# coding: utf-8

"""
    Object Storage Interoperability Services API

    This is VMware Cloud Director Object Storage Interoperability Services API. Once storage platform vendor implements REST APIs complying with this specification, Object Storage Extension can integrate with the platform without coding effort.  # noqa: E501

    The version of the OpenAPI document: 1.0.0-oas3
    Contact: wachen@vmware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class OsisS3Credential(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_key': 'str',
        'secret_key': 'str',
        'active': 'bool',
        'creation_date': 'datetime',
        'tenant_id': 'str',
        'user_id': 'str',
        'username': 'str',
        'cd_user_id': 'str',
        'cd_tenant_id': 'str'
    }

    attribute_map = {
        'access_key': 'access_key',
        'secret_key': 'secret_key',
        'active': 'active',
        'creation_date': 'creation_date',
        'tenant_id': 'tenant_id',
        'user_id': 'user_id',
        'username': 'username',
        'cd_user_id': 'cd_user_id',
        'cd_tenant_id': 'cd_tenant_id'
    }

    def __init__(self, access_key=None, secret_key=None, active=None, creation_date=None, tenant_id=None, user_id=None, username=None, cd_user_id=None, cd_tenant_id=None, local_vars_configuration=None):  # noqa: E501
        """OsisS3Credential - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_key = None
        self._secret_key = None
        self._active = None
        self._creation_date = None
        self._tenant_id = None
        self._user_id = None
        self._username = None
        self._cd_user_id = None
        self._cd_tenant_id = None
        self.discriminator = None

        self.access_key = access_key
        self.secret_key = secret_key
        if active is not None:
            self.active = active
        if creation_date is not None:
            self.creation_date = creation_date
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if user_id is not None:
            self.user_id = user_id
        if username is not None:
            self.username = username
        if cd_user_id is not None:
            self.cd_user_id = cd_user_id
        if cd_tenant_id is not None:
            self.cd_tenant_id = cd_tenant_id

    @property
    def access_key(self):
        """Gets the access_key of this OsisS3Credential.  # noqa: E501

        S3 access key  # noqa: E501

        :return: The access_key of this OsisS3Credential.  # noqa: E501
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this OsisS3Credential.

        S3 access key  # noqa: E501

        :param access_key: The access_key of this OsisS3Credential.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and access_key is None:  # noqa: E501
            raise ValueError("Invalid value for `access_key`, must not be `None`")  # noqa: E501

        self._access_key = access_key

    @property
    def secret_key(self):
        """Gets the secret_key of this OsisS3Credential.  # noqa: E501

        S3 secret key  # noqa: E501

        :return: The secret_key of this OsisS3Credential.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this OsisS3Credential.

        S3 secret key  # noqa: E501

        :param secret_key: The secret_key of this OsisS3Credential.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and secret_key is None:  # noqa: E501
            raise ValueError("Invalid value for `secret_key`, must not be `None`")  # noqa: E501

        self._secret_key = secret_key

    @property
    def active(self):
        """Gets the active of this OsisS3Credential.  # noqa: E501

        S3 credential status  # noqa: E501

        :return: The active of this OsisS3Credential.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this OsisS3Credential.

        S3 credential status  # noqa: E501

        :param active: The active of this OsisS3Credential.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def creation_date(self):
        """Gets the creation_date of this OsisS3Credential.  # noqa: E501

        S3 credential creation date  # noqa: E501

        :return: The creation_date of this OsisS3Credential.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this OsisS3Credential.

        S3 credential creation date  # noqa: E501

        :param creation_date: The creation_date of this OsisS3Credential.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def tenant_id(self):
        """Gets the tenant_id of this OsisS3Credential.  # noqa: E501

        The ID of the tenant which the S3 credential belongs to  # noqa: E501

        :return: The tenant_id of this OsisS3Credential.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this OsisS3Credential.

        The ID of the tenant which the S3 credential belongs to  # noqa: E501

        :param tenant_id: The tenant_id of this OsisS3Credential.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def user_id(self):
        """Gets the user_id of this OsisS3Credential.  # noqa: E501

        The ID of the user which the S3 credential belongs to  # noqa: E501

        :return: The user_id of this OsisS3Credential.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this OsisS3Credential.

        The ID of the user which the S3 credential belongs to  # noqa: E501

        :param user_id: The user_id of this OsisS3Credential.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this OsisS3Credential.  # noqa: E501

        The name of the user which the S3 credential belongs to  # noqa: E501

        :return: The username of this OsisS3Credential.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this OsisS3Credential.

        The name of the user which the S3 credential belongs to  # noqa: E501

        :param username: The username of this OsisS3Credential.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def cd_user_id(self):
        """Gets the cd_user_id of this OsisS3Credential.  # noqa: E501

        Cloud Director user id  # noqa: E501

        :return: The cd_user_id of this OsisS3Credential.  # noqa: E501
        :rtype: str
        """
        return self._cd_user_id

    @cd_user_id.setter
    def cd_user_id(self, cd_user_id):
        """Sets the cd_user_id of this OsisS3Credential.

        Cloud Director user id  # noqa: E501

        :param cd_user_id: The cd_user_id of this OsisS3Credential.  # noqa: E501
        :type: str
        """

        self._cd_user_id = cd_user_id

    @property
    def cd_tenant_id(self):
        """Gets the cd_tenant_id of this OsisS3Credential.  # noqa: E501

        id of Cloud Director tenant which the user belongs to  # noqa: E501

        :return: The cd_tenant_id of this OsisS3Credential.  # noqa: E501
        :rtype: str
        """
        return self._cd_tenant_id

    @cd_tenant_id.setter
    def cd_tenant_id(self, cd_tenant_id):
        """Sets the cd_tenant_id of this OsisS3Credential.

        id of Cloud Director tenant which the user belongs to  # noqa: E501

        :param cd_tenant_id: The cd_tenant_id of this OsisS3Credential.  # noqa: E501
        :type: str
        """

        self._cd_tenant_id = cd_tenant_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OsisS3Credential):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OsisS3Credential):
            return True

        return self.to_dict() != other.to_dict()
