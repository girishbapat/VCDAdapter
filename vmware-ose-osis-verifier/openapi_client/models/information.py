# coding: utf-8

"""
    Object Storage Interoperability Services API

    This is VMware Cloud Director Object Storage Interoperability Services API. Once storage platform vendor implements REST APIs complying with this specification, Object Storage Extension can integrate with the platform without coding effort.  # noqa: E501

    The version of the OpenAPI document: 1.0.0-oas3
    Contact: wachen@vmware.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Information(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'platform_name': 'str',
        'platform_version': 'str',
        'api_version': 'str',
        'logo_uri': 'str',
        'status': 'str',
        'auth_modes': 'list[str]',
        'services': 'dict(str, str)',
        'regions': 'list[str]',
        'storage_classes': 'list[str]',
        'not_implemented': 'list[str]'
    }

    attribute_map = {
        'platform_name': 'platform_name',
        'platform_version': 'platform_version',
        'api_version': 'api_version',
        'logo_uri': 'logo_uri',
        'status': 'status',
        'auth_modes': 'auth_modes',
        'services': 'services',
        'regions': 'regions',
        'storage_classes': 'storage_classes',
        'not_implemented': 'not_implemented'
    }

    def __init__(self, platform_name=None, platform_version=None, api_version=None, logo_uri=None, status=None, auth_modes=None, services=None, regions=None, storage_classes=None, not_implemented=None, local_vars_configuration=None):  # noqa: E501
        """Information - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._platform_name = None
        self._platform_version = None
        self._api_version = None
        self._logo_uri = None
        self._status = None
        self._auth_modes = None
        self._services = None
        self._regions = None
        self._storage_classes = None
        self._not_implemented = None
        self.discriminator = None

        self.platform_name = platform_name
        if platform_version is not None:
            self.platform_version = platform_version
        self.api_version = api_version
        if logo_uri is not None:
            self.logo_uri = logo_uri
        self.status = status
        if auth_modes is not None:
            self.auth_modes = auth_modes
        if services is not None:
            self.services = services
        if regions is not None:
            self.regions = regions
        if storage_classes is not None:
            self.storage_classes = storage_classes
        self.not_implemented = not_implemented

    @property
    def platform_name(self):
        """Gets the platform_name of this Information.  # noqa: E501

        name of the storage platform  # noqa: E501

        :return: The platform_name of this Information.  # noqa: E501
        :rtype: str
        """
        return self._platform_name

    @platform_name.setter
    def platform_name(self, platform_name):
        """Sets the platform_name of this Information.

        name of the storage platform  # noqa: E501

        :param platform_name: The platform_name of this Information.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and platform_name is None:  # noqa: E501
            raise ValueError("Invalid value for `platform_name`, must not be `None`")  # noqa: E501

        self._platform_name = platform_name

    @property
    def platform_version(self):
        """Gets the platform_version of this Information.  # noqa: E501

        version of the storage platform  # noqa: E501

        :return: The platform_version of this Information.  # noqa: E501
        :rtype: str
        """
        return self._platform_version

    @platform_version.setter
    def platform_version(self, platform_version):
        """Sets the platform_version of this Information.

        version of the storage platform  # noqa: E501

        :param platform_version: The platform_version of this Information.  # noqa: E501
        :type: str
        """

        self._platform_version = platform_version

    @property
    def api_version(self):
        """Gets the api_version of this Information.  # noqa: E501

        OSIS version the REST services complying with  # noqa: E501

        :return: The api_version of this Information.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this Information.

        OSIS version the REST services complying with  # noqa: E501

        :param api_version: The api_version of this Information.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and api_version is None:  # noqa: E501
            raise ValueError("Invalid value for `api_version`, must not be `None`")  # noqa: E501

        self._api_version = api_version

    @property
    def logo_uri(self):
        """Gets the logo_uri of this Information.  # noqa: E501

        uri of the platform logo so that OSE can use it on UI  # noqa: E501

        :return: The logo_uri of this Information.  # noqa: E501
        :rtype: str
        """
        return self._logo_uri

    @logo_uri.setter
    def logo_uri(self, logo_uri):
        """Sets the logo_uri of this Information.

        uri of the platform logo so that OSE can use it on UI  # noqa: E501

        :param logo_uri: The logo_uri of this Information.  # noqa: E501
        :type: str
        """

        self._logo_uri = logo_uri

    @property
    def status(self):
        """Gets the status of this Information.  # noqa: E501


        :return: The status of this Information.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Information.


        :param status: The status of this Information.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["NORMAL", "WARNING", "ERROR", "UNKNOWN"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def auth_modes(self):
        """Gets the auth_modes of this Information.  # noqa: E501


        :return: The auth_modes of this Information.  # noqa: E501
        :rtype: list[str]
        """
        return self._auth_modes

    @auth_modes.setter
    def auth_modes(self, auth_modes):
        """Sets the auth_modes of this Information.


        :param auth_modes: The auth_modes of this Information.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Basic", "Bearer"]  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                not set(auth_modes).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `auth_modes` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(auth_modes) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._auth_modes = auth_modes

    @property
    def services(self):
        """Gets the services of this Information.  # noqa: E501

        Supported Services' URL of the storage platform  # noqa: E501

        :return: The services of this Information.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this Information.

        Supported Services' URL of the storage platform  # noqa: E501

        :param services: The services of this Information.  # noqa: E501
        :type: dict(str, str)
        """

        self._services = services

    @property
    def regions(self):
        """Gets the regions of this Information.  # noqa: E501


        :return: The regions of this Information.  # noqa: E501
        :rtype: list[str]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this Information.


        :param regions: The regions of this Information.  # noqa: E501
        :type: list[str]
        """

        self._regions = regions

    @property
    def storage_classes(self):
        """Gets the storage_classes of this Information.  # noqa: E501


        :return: The storage_classes of this Information.  # noqa: E501
        :rtype: list[str]
        """
        return self._storage_classes

    @storage_classes.setter
    def storage_classes(self, storage_classes):
        """Sets the storage_classes of this Information.


        :param storage_classes: The storage_classes of this Information.  # noqa: E501
        :type: list[str]
        """

        self._storage_classes = storage_classes

    @property
    def not_implemented(self):
        """Gets the not_implemented of this Information.  # noqa: E501

        the operation id array of optional OSIS APIs which is not implemented  # noqa: E501

        :return: The not_implemented of this Information.  # noqa: E501
        :rtype: list[str]
        """
        return self._not_implemented

    @not_implemented.setter
    def not_implemented(self, not_implemented):
        """Sets the not_implemented of this Information.

        the operation id array of optional OSIS APIs which is not implemented  # noqa: E501

        :param not_implemented: The not_implemented of this Information.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and not_implemented is None:  # noqa: E501
            raise ValueError("Invalid value for `not_implemented`, must not be `None`")  # noqa: E501

        self._not_implemented = not_implemented

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Information):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Information):
            return True

        return self.to_dict() != other.to_dict()
