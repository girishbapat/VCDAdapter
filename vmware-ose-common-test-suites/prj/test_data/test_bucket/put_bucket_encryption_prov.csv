TCID,Catalog,Role,Priority,ClientType,AuthSettings,TenantState,Variables,Precondition,Parameter,ResponseVariables,ExpectResponseCode,ExpectResponseHeader,ExpectResponseBody,ExpectResponseBodySchema,PostValidation,Cleanup,Description,Result,Skip,Platform_Skip
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#2,Tenant Default Encryption Validation,vcd0:org1:tu1,P0,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.%s"" % timestamp(format=""%Y-%m-%dt%H-%M-%S.%fz"")}","[(""vcd0:org1:ta1"", ""SSECfgAPI"", ""put_sse_config"", {""type"": ""NONE""}, [200]),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404]),
(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}}",,200,,,,"[(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""get_bucket_encryption"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,None,None,{""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":""AES256""}}]}}),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""list_buckets"", {""Filter"":""name==%s"" % self.variables['bucket_name']}, [200],None,None,None, {""owner"":{""id"":self.get_user_info(""vcd0:org1:tu1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username"")},""buckets"":[{""name"":self.variables[""bucket_name""],""creationDate"":datetime.datetime, ""path"":""%s/%s"" % (self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""), self.variables[""bucket_name""]),""tenant"":self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""),""owner"":{""id"":self.get_user_info(""vcd0:org1:tu1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username"")},""region"":self.get_user_info(""vcd0:org1:tu1"").get(""region""),""objectCount"":0,""usedBytes"":0,""lastModified"":datetime.datetime, ""encrypted"":True, ""s3Href"":""%sapi/v1/s3/%s"" % (self.get_oss_url(), self.variables[""bucket_name""])}],""pageInfo"":{""offset"":0,""limit"":1000,""total"":1}}),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""list_objects_v2"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,{'x-vmware-voss-encryption': 'SSE_S3'},None,{""name"":self.variables['bucket_name'], ""keyCount"":0,""maxKeys"":1000, ""truncated"":False,""path"":""%s/%s"" % (self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""), self.variables[""bucket_name""]),""tenant"":self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""), ""owner"":{""id"":self.get_user_info(""vcd0:org1:tu1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username"")},""region"":self.get_user_info(""vcd0:org1:tu1"").get(""region""),""objectCount"":0,""usedBytes"":0,""lastModified"":datetime.datetime,'encrypted':True, ""s3Href"":""%sapi/v1/s3/%s"" % (self.get_oss_url(), self.variables[""bucket_name""]),""objectBrief"":[],""pageInfo"":{""offset"":0,""limit"":1000,""total"":0}}),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""head_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,{'x-vmware-voss-encryption': 'SSE_S3'})]","[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","TU1 put encryption configuration of a bucket to enable SSE-S3 when default tenant encryption is NONE

Precondition Steps:
1. TU1 create bucket1

Post Validation Steps:
1. TU1 get/head bucket1

Cleanup Steps:
1. TU1 delete bucket1",,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#3,Tenant Default Encryption Validation,vcd0:org1:tu1,P0,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.%s"" % timestamp(format=""%Y-%m-%dt%H-%M-%S.%fz"")}","[(""vcd0:org1:ta1"", ""SSECfgAPI"", ""put_sse_config"", {""type"": ""SSE_S3""}, [200]),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404]),
(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}}",,200,,,,"[(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""get_bucket_encryption"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,None,None,{""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":""AES256""}}]}}),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""list_buckets"", {""Filter"":""name==%s"" % self.variables['bucket_name']}, [200],None,None,None, {""owner"":{""id"":self.get_user_info(""vcd0:org1:tu1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username"")},""buckets"":[{""name"":self.variables[""bucket_name""],""creationDate"":datetime.datetime, ""path"":""%s/%s"" % (self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""), self.variables[""bucket_name""]),""tenant"":self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""),""owner"":{""id"":self.get_user_info(""vcd0:org1:tu1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username"")},""region"":self.get_user_info(""vcd0:org1:tu1"").get(""region""),""objectCount"":0,""usedBytes"":0,""lastModified"":datetime.datetime, 'encrypted': True, ""s3Href"":""%sapi/v1/s3/%s"" % (self.get_oss_url(), self.variables[""bucket_name""])}],""pageInfo"":{""offset"":0,""limit"":1000,""total"":1}}),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""list_objects_v2"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,{'x-vmware-voss-encryption': 'SSE_S3'},None,{""name"":self.variables['bucket_name'], ""keyCount"":0,""maxKeys"":1000, ""truncated"":False,""path"":""%s/%s"" % (self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""), self.variables[""bucket_name""]),""tenant"":self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""), ""owner"":{""id"":self.get_user_info(""vcd0:org1:tu1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username"")},""region"":self.get_user_info(""vcd0:org1:tu1"").get(""region""),""objectCount"":0,""usedBytes"":0,""lastModified"":datetime.datetime,""s3Href"":""%sapi/v1/s3/%s"" % (self.get_oss_url(), self.variables[""bucket_name""]),""objectBrief"":[],""pageInfo"":{""offset"":0,""limit"":1000,""total"":0}}),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""head_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,{'x-vmware-voss-encryption': 'SSE_S3'})]","[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","TU1 put encryption configuration of a bucket to enable SSE-S3 when default tenant encryption is SSE-S3

Precondition Steps:
1. TU1 create bucket1

Post Validation Steps:
1. TU1 get/head bucket1

Cleanup Steps:
1. TU1 delete bucket1",,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#4,Tenant Default Encryption Validation,vcd0:org1:tu1,P0,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.%s"" % timestamp(format=""%Y-%m-%dt%H-%M-%S.%fz""), ""sse_c_key"":generate_sse_c_key()}","[(""vcd0:org1:ta1"", ""SSECfgAPI"", ""put_sse_config"", {""type"": ""SSE_C"", ""sseCAlgorithm"": ""AES256"", ""sseCKey"": self.variables['sse_c_key']['key_b64']}, [200]),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404]),
(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}}",,200,,,,"[(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""get_bucket_encryption"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,None,None,{""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":""AES256""}}]}}),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""list_buckets"", {""Filter"":""name==%s"" % self.variables['bucket_name']}, [200],None,None,None, {""owner"":{""id"":self.get_user_info(""vcd0:org1:tu1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username"")},""buckets"":[{""name"":self.variables[""bucket_name""],""creationDate"":datetime.datetime, ""path"":""%s/%s"" % (self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""), self.variables[""bucket_name""]),""tenant"":self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""),""owner"":{""id"":self.get_user_info(""vcd0:org1:tu1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username"")},""region"":self.get_user_info(""vcd0:org1:tu1"").get(""region""),""objectCount"":0,""usedBytes"":0,""lastModified"":datetime.datetime, 'encrypted': True, ""s3Href"":""%sapi/v1/s3/%s"" % (self.get_oss_url(), self.variables[""bucket_name""])}],""pageInfo"":{""offset"":0,""limit"":1000,""total"":1}}),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""list_objects_v2"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,{'x-vmware-voss-encryption': 'SSE_S3'},None,{""name"":self.variables['bucket_name'], 'prefix': None,""keyCount"":0,""maxKeys"":1000, ""truncated"":False,""path"":""%s/%s"" % (self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""), self.variables[""bucket_name""]),""tenant"":self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""), ""owner"":{""id"":self.get_user_info(""vcd0:org1:tu1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username"")},""region"":self.get_user_info(""vcd0:org1:tu1"").get(""region""),""objectCount"":0,""usedBytes"":0,""lastModified"":datetime.datetime,'encrypted': True,""s3Href"":""%sapi/v1/s3/%s"" % (self.get_oss_url(), self.variables[""bucket_name""]),""objectBrief"":[],""pageInfo"":{""offset"":0,""limit"":1000,""total"":0}}),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""head_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,{'x-vmware-voss-encryption': 'SSE_S3'})]","[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","TU1 put encryption configuration of a bucket to enable SSE-S3 when default tenant encryption is SSE-C

Precondition Steps:
1. TU1 create bucket1

Post Validation Steps:
1. TU1 get/head bucket1

Cleanup Steps:
1. TU1 delete bucket1",,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#5,TA,vcd0:org1:ta1,P0,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.ta1.s3.ext.put-encryption.%s"" % timestamp(format=""%Y-%m-%dt%H-%M-%S.%fz"")}","[(""vcd0:org1:ta1"", ""SSECfgAPI"", ""put_sse_config"", {""type"": ""NONE""}, [200]),
(""vcd0:org1:ta1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404]),
(""vcd0:org1:ta1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}}",,200,,,,"[(""vcd0:org1:ta1"", ""S3CompatibleAPI"", ""get_bucket_encryption"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,None,None,{""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":""AES256""}}]}}),
(""vcd0:org1:ta1"", ""S3ExtendedJsonAPI"", ""list_buckets"", {""Filter"":""name==%s"" % self.variables['bucket_name']}, [200],None,None,None, {""owner"":{""id"":self.get_user_info(""vcd0:org1:ta1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:ta1"").get(""username"")},""buckets"":[{""name"":self.variables[""bucket_name""],""creationDate"":datetime.datetime, ""path"":""%s/%s"" % (self.get_user_info(""vcd0:org1:ta1"").get(""tenant_id""), self.variables[""bucket_name""]),""tenant"":self.get_user_info(""vcd0:org1:ta1"").get(""tenant_id""),""owner"":{""id"":self.get_user_info(""vcd0:org1:ta1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:ta1"").get(""username"")},""region"":self.get_user_info(""vcd0:org1:ta1"").get(""region""),""objectCount"":0,""usedBytes"":0,""lastModified"":datetime.datetime, ""s3Href"":""%sapi/v1/s3/%s"" % (self.get_oss_url(), self.variables[""bucket_name""])}],""pageInfo"":{""offset"":0,""limit"":1000,""total"":1}}),
(""vcd0:org1:ta1"", ""S3ExtendedJsonAPI"", ""list_objects_v2"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,{'x-vmware-voss-encryption': 'SSE_S3'},None,{""name"":self.variables['bucket_name'], ""keyCount"":0,""maxKeys"":1000, ""truncated"":False,""path"":""%s/%s"" % (self.get_user_info(""vcd0:org1:ta1"").get(""tenant_id""), self.variables[""bucket_name""]),""tenant"":self.get_user_info(""vcd0:org1:ta1"").get(""tenant_id""), ""owner"":{""id"":self.get_user_info(""vcd0:org1:ta1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:ta1"").get(""username"")},""region"":self.get_user_info(""vcd0:org1:ta1"").get(""region""),""objectCount"":0,""usedBytes"":0,""lastModified"":datetime.datetime,'encrypted': True, ""s3Href"":""%sapi/v1/s3/%s"" % (self.get_oss_url(), self.variables[""bucket_name""]),""objectBrief"":[],""pageInfo"":{""offset"":0,""limit"":1000,""total"":0}}),
(""vcd0:org1:ta1"", ""S3ExtendedJsonAPI"", ""head_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,{'x-vmware-voss-encryption': 'SSE_S3'})]","[(""vcd0:org1:ta1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","TA1 put encryption configuration of a bucket to enable SSE-S3

Precondition Steps:
1. TA1 create bucket1

Post Validation Steps:
1. TA1 get/head bucket1

Cleanup Steps:
1. TA1 delete bucket1",,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#6,URI Validation - Bucket,vcd0:org1:tu1,P0,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.%s.%s"" % (""a""*(63-18-len(""vcd0.org1.tu1.s3.ext.put-encryption."")), timestamp(format=""%Y%m%d%H%M%S%f"")[:-3])}","[(""vcd0:org1:ta1"", ""SSECfgAPI"", ""put_sse_config"", {""type"": ""NONE""}, [200]),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404]),
(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}}",,200,,,,"[(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""get_bucket_encryption"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,None,None,{""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":""AES256""}}]}}),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""list_buckets"", {""Filter"":""name==%s"" % self.variables['bucket_name']}, [200],None,None,None, {""owner"":{""id"":self.get_user_info(""vcd0:org1:tu1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username"")},""buckets"":[{""name"":self.variables[""bucket_name""],""creationDate"":datetime.datetime, ""path"":""%s/%s"" % (self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""), self.variables[""bucket_name""]),""tenant"":self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""),""owner"":{""id"":self.get_user_info(""vcd0:org1:tu1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username"")},""region"":self.get_user_info(""vcd0:org1:tu1"").get(""region""),""objectCount"":0,""usedBytes"":0,""lastModified"":datetime.datetime, ""encrypted"":True, ""s3Href"":""%sapi/v1/s3/%s"" % (self.get_oss_url(), self.variables[""bucket_name""])}],""pageInfo"":{""offset"":0,""limit"":1000,""total"":1}}),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""list_objects_v2"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,{'x-vmware-voss-encryption': 'SSE_S3'},None,{""name"":self.variables['bucket_name'], ""keyCount"":0,""maxKeys"":1000, ""truncated"":False,""path"":""%s/%s"" % (self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""), self.variables[""bucket_name""]),""tenant"":self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""), ""owner"":{""id"":self.get_user_info(""vcd0:org1:tu1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username"")},""region"":self.get_user_info(""vcd0:org1:tu1"").get(""region""),""objectCount"":0,""usedBytes"":0,""lastModified"":datetime.datetime,'encrypted':True, ""s3Href"":""%sapi/v1/s3/%s"" % (self.get_oss_url(), self.variables[""bucket_name""]),""objectBrief"":[],""pageInfo"":{""offset"":0,""limit"":1000,""total"":0}}),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""head_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,{'x-vmware-voss-encryption': 'SSE_S3'})]","[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","TU1 put encryption configuration of an existing bucket with name (length=63) to enable SSE-S3 when default tenant encryption is NONE

Precondition Steps:
1. TU1 create bucket1

Post Validation Steps:
1. TU1 get/head bucket1

Cleanup Steps:
1. TU1 delete bucket1",,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#7,URI Validation - Bucket,vcd0:org1:tu1,P1,S3CompatibleAPI,,,"{""bucket_name"": ""vcd0.org1.tu1.s3.ext.put-encryption.%s"" % timestamp(format=""%Y-%m-%dt%H-%M-%S.%fz"")}",,"{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}}",,404,,"{'Error': {'Status': '404', 'Code': 'NoSuchBucket', 'Message': re.compile("".*The specified bucket does not exist.*""), 'Resource': '/api/v1/s3/%s' % self.variables[""bucket_name""]}}",,,,TU1 put encryption configuration of a nonexistent bucket to enable SSE-S3,,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#8,URI Validation - Bucket,vcd0:org1:tu1,P1,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.deleted.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3]}","[(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409]),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}}",,404,,"{'Error': {'Status': '404', 'Code': 'NoSuchBucket', 'Message': re.compile("".*The specified bucket does not exist.*""), 'Resource': '/api/v1/s3/%s' % self.variables[""bucket_name""]}}",,,"[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",TU1 put encryption configuration of a deleted bucket to enable SSE-S3,,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#9,URI Validation - Bucket,vcd0:org1:tu1,P1,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3]}","[(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":self.variables[""bucket_name""].swapcase(),""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}}",,404,,"{'Error': {'Status': '404', 'Code': 'NoSuchBucket', 'Message': re.compile("".*The specified bucket does not exist.*""), 'Resource': '/api/v1/s3/%s' % self.variables[""bucket_name""].swapcase()}}",,,"[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",TU1 put encryption configuration of a nonexistent bucket with invalid name (uppercase) to enable SSE-S3,,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#10,URI Validation - Bucket,vcd0:org1:tu1,P1,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3]}","[(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":self.variables[""bucket_name""].replace('-','_'),""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}}",,404,,"{'Error': {'Status': '404', 'Code': 'NoSuchBucket', 'Message': re.compile("".*The specified bucket does not exist.*""), 'Resource': '/api/v1/s3/%s' % self.variables[""bucket_name""].replace('-','_')}}",,,"[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",TU1 put encryption configuration of a nonexistent bucket with invalid name (underline) to enable SSE-S3,,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#11,URI Validation - Bucket,vcd0:org1:tu1,P1,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3]}","[(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":""   %s  "" % self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}}",,404,,"{'Error': {'Status': '404', 'Code': 'NoSuchBucket', 'Message': re.compile("".*The specified bucket does not exist.*""), 'Resource': '/api/v1/s3/%20%20%20{0}%20%20'.format(self.variables[""bucket_name""])}}",,,"[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",TU1 put encryption configuration of a nonexistent bucket with invalid name (leading/trailing space) to enable SSE-S3,,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#12,URI Validation - Bucket,vcd0:org1:tu1,P1,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.%s.%s"" % (""a""*(63-18-len(""vcd0.org1.tu1.s3.ext.put-encryption."")), timestamp(format=""%Y%m%d%H%M%S%f"")[:-3])}","[(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":""%sa"" % self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}}",,404,,"{'Error': {'Status': '404', 'Code': 'NoSuchBucket', 'Message': re.compile("".*The specified bucket does not exist.*""), 'Resource': '/api/v1/s3/%sa' % self.variables[""bucket_name""]}}",,,"[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",TU1 put encryption configuration of a nonexistent bucket with invalid name (length=64) to enable SSE-S3,,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#13,Permission Validation - PA,vcd0:org0:user1,P1,S3ExtendedAPI,"{""method"":""token""}",,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.pa.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3]}","[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404]),
(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}}",,403,,"{'Error': {'Status': '403', 'Code': 'FORBIDDEN_DUE_TO_INSUFFICIENT_PERMISSION', 'Message': re.compile('.*Forbidden to access the resource:*'), 'Resource': '/api/v1/s3/%s' % self.variables[""bucket_name""]}}",,"[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""get_bucket_encryption"", {""Bucket"":self.variables[""bucket_name""]}, [200])]","[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",PA put bucket encryption via vcloud token,,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#14,Permission Validation ,vcd0:org1:tu1,P1,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu2.s3.ext.put-encryption.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3]}","[(""vcd0:org1:tu2"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404]),
(""vcd0:org1:tu2"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}}",,403,,"{'Error': {'Status': '403', 'Code': 'AccessDenied', 'Message': re.compile(""Access Denied \(Service: Amazon S3; Status Code: 403; Error Code: AccessDenied; Request ID: .*; S3 Extended Request ID: .*\)""), 'Resource': '/api/v1/s3/%s' % self.variables[""bucket_name""]}}",,"[(""vcd0:org1:tu2"", ""S3ExtendedJsonAPI"", ""get_bucket_encryption"", {""Bucket"":self.variables[""bucket_name""]}, [404])]","[(""vcd0:org1:tu2"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","TU1 put bucket encryption of TU2's bucket via vcloud token (same tenant)

Precondition:
1. TU2 create bucket1

PostValidation:
1. TU2 get encryption of bucket1",,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#15,Permission Validation ,vcd0:org1:tu1,P1,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org2.tu1.s3.ext.put-encryption.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3]}","[(""vcd0:org2:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404]),
(""vcd0:org2:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}}",,403,,"{'Error': {'Status': '403', 'Code': 'AccessDenied', 'Resource': '/api/v1/s3/%s' % self.variables[""bucket_name""]}}",,"[(""vcd0:org2:tu1"", ""S3ExtendedJsonAPI"", ""get_bucket_encryption"", {""Bucket"":self.variables[""bucket_name""]}, [200])]","[(""vcd0:org2:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","TU1 put bucket encryption of TU2's bucket via vcloud token (different tenant)

Precondition:
1. TU2 create bucket1

PostValidation:
1. TU2 get encryption of bucket1",,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#16,Permission Validation ,vcd0:org1:tu1,P1,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu2.s3.ext.put-encryption.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3]}","[(""vcd0:org1:tu2"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404]),
(""vcd0:org1:tu2"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409]),
(""vcd0:org1:tu2"", ""S3CompatibleAPI"", ""put_bucket_acl"", {""Bucket"":self.variables[""bucket_name""], ""GrantFullControl"":""id=\""%s\"""" % self.get_user_info(""vcd0:org1:tu1"").get(""canonical_id"")}, [200])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}}",,403,,"{'Error': {'Status': '403', 'Code': 'AccessDenied', 'Message': re.compile(""Access Denied \(Service: Amazon S3; Status Code: 403; Error Code: AccessDenied; Request ID: .*; S3 Extended Request ID: .*\)""), 'Resource': '/api/v1/s3/%s' % self.variables[""bucket_name""]}}",,"[(""vcd0:org1:tu2"", ""S3ExtendedJsonAPI"", ""get_bucket_encryption"", {""Bucket"":self.variables[""bucket_name""]}, [200])]","[(""vcd0:org1:tu2"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","TU1 put bucket encryption of TU2's bucket (TU1 has FULL_CONTROL permission) via vcloud token (same tenant)

Precondition:
1. TU2 create bucket1
2. TU2 grant FULL_CONTROL permission of bucket1 to TU1

PostValidation:
1. TU2 get encryption of bucket1",,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#17,Body Validation - SSEAlgorithm,vcd0:org1:tu1,P0,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3]}","[(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'aws:kms', ""KMSMasterKeyID"":""'arn:aws:kms:us-east-1:1234/5678example'""}}]}}",,200,,,,,"[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","TU1 put encryption configuration of a bucket to enable SSE-KMS - (invalid KMS id. Returns 200)

Precondition Steps:
1. TU1 create bucket1

Cleanup Steps:
1. TU1 delete bucket1",,,CLOUDIAN_SKIP
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#18,Body Validation - SSEAlgorithm,vcd0:org1:tu1,P2,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3]}","[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404]),
(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409]),
(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""put_bucket_encryption"", {""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}}, [200])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}}",,200,,,,"[(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""get_bucket_encryption"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,None,None,{""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":""AES256""}}]}}),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""list_buckets"", {""Filter"":""name==%s"" % self.variables['bucket_name']}, [200],None,None,None, {""owner"":{""id"":self.get_user_info(""vcd0:org1:tu1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username"")},""buckets"":[{""name"":self.variables[""bucket_name""],""creationDate"":datetime.datetime, ""path"":""%s/%s"" % (self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""), self.variables[""bucket_name""]),""tenant"":self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""),""owner"":{""id"":self.get_user_info(""vcd0:org1:tu1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username"")},""region"":self.get_user_info(""vcd0:org1:tu1"").get(""region""),""objectCount"":0,""usedBytes"":0,""lastModified"":datetime.datetime, ""encrypted"":True, ""s3Href"":""%sapi/v1/s3/%s"" % (self.get_oss_url(), self.variables[""bucket_name""])}],""pageInfo"":{""offset"":0,""limit"":1000,""total"":1}}),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""list_objects_v2"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,{'x-vmware-voss-encryption': 'SSE_S3'},None,{""name"":self.variables['bucket_name'], ""keyCount"":0,""maxKeys"":1000, ""truncated"":False,""path"":""%s/%s"" % (self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""), self.variables[""bucket_name""]),""tenant"":self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""), ""owner"":{""id"":self.get_user_info(""vcd0:org1:tu1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username"")},""region"":self.get_user_info(""vcd0:org1:tu1"").get(""region""),""objectCount"":0,""usedBytes"":0,""lastModified"":datetime.datetime,'encrypted': True, ""s3Href"":""%sapi/v1/s3/%s"" % (self.get_oss_url(), self.variables[""bucket_name""]),""objectBrief"":[],""pageInfo"":{""offset"":0,""limit"":1000,""total"":0}}),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""head_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,{'x-vmware-voss-encryption': 'SSE_S3'})]","[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","TU1 put encryption configuration of a bucket (has encryption set before) to enable SSE-S3

Precondition Steps:
1. TU1 create bucket1
2. TU1 set encryption of bucket1

Post Validation Steps:
1. TU1 get/head bucket1

Cleanup Steps:
1. TU1 delete bucket1",,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#19,Body Validation - SSEAlgorithm,vcd0:org1:tu1,P2,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3]}","[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404]),
(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409]),
(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""put_bucket_encryption"", {""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}}, [200]),
(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""delete_bucket_encryption"", {""Bucket"":self.variables[""bucket_name""]}, [204])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}}",,200,,,,"[(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""get_bucket_encryption"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,None,None,{""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":""AES256""}}]}}),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""list_buckets"", {""Filter"":""name==%s"" % self.variables['bucket_name']}, [200],None,None,None, {""owner"":{""id"":self.get_user_info(""vcd0:org1:tu1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username"")},""buckets"":[{""name"":self.variables[""bucket_name""],""creationDate"":datetime.datetime, ""path"":""%s/%s"" % (self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""), self.variables[""bucket_name""]),""tenant"":self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""),""owner"":{""id"":self.get_user_info(""vcd0:org1:tu1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username"")},""region"":self.get_user_info(""vcd0:org1:tu1"").get(""region""),""objectCount"":0,""usedBytes"":0,""lastModified"":datetime.datetime, ""encrypted"":True, ""s3Href"":""%sapi/v1/s3/%s"" % (self.get_oss_url(), self.variables[""bucket_name""])}],""pageInfo"":{""offset"":0,""limit"":1000,""total"":1}}),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""list_objects_v2"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,{'x-vmware-voss-encryption': 'SSE_S3'},None,{""name"":self.variables['bucket_name'], ""keyCount"":0,""maxKeys"":1000, ""truncated"":False,""path"":""%s/%s"" % (self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""), self.variables[""bucket_name""]),""tenant"":self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""), ""owner"":{""id"":self.get_user_info(""vcd0:org1:tu1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username"")},""region"":self.get_user_info(""vcd0:org1:tu1"").get(""region""),""objectCount"":0,""usedBytes"":0,""lastModified"":datetime.datetime,'encrypted': True, ""s3Href"":""%sapi/v1/s3/%s"" % (self.get_oss_url(), self.variables[""bucket_name""]),""objectBrief"":[],""pageInfo"":{""offset"":0,""limit"":1000,""total"":0}}),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""head_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,{'x-vmware-voss-encryption': 'SSE_S3'})]","[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","TU1 put encryption configuration of a bucket (has encryption set before then delete) to enable SSE-S3

Precondition Steps:
1. TU1 create bucket1
2. TU1 set encryption of bucket1
3. TU1 delete encryption of bucket1

Post Validation Steps:
1. TU1 get/head bucket1

Cleanup Steps:
1. TU1 delete bucket1",,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#20,Body Validation - SSEAlgorithm,vcd0:org1:tu1,P2,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3]}","[(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'aes256'}}]}}",,400,,"{'Error': {'Status': '400', 'Code': 'InvalidEncryptionAlgorithmError', 'Message': 'The encryption request you specified is not valid. The valid value is AES256.', 'Resource': '/api/v1/s3/%s' % self.variables[""bucket_name""]}}",,,"[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",TU1 put encryption configuration of a bucket to set wrong encryption (swapcase),,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#21,Body Validation - SSEAlgorithm,vcd0:org1:tu1,P2,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3]}","[(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'   AES256   '}}]}}",,400,,"{'Error': {'Status': '400', 'Code': 'InvalidEncryptionAlgorithmError', 'Message': 'The encryption request you specified is not valid. The valid value is AES256.', 'Resource': '/api/v1/s3/%s' % self.variables[""bucket_name""]}}",,,"[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",TU1 put encryption configuration of a bucket to set wrong encryption (leading/trailing spaces),,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#22,Body Validation - SSEAlgorithm,vcd0:org1:tu1,P2,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3]}","[(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES128'}}]}}",,400,,"{'Error': {'Status': '400', 'Code': 'InvalidEncryptionAlgorithmError', 'Message': 'The encryption request you specified is not valid. The valid value is AES256.', 'Resource': '/api/v1/s3/%s' % self.variables[""bucket_name""]}}",,,"[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",TU1 put encryption configuration of a bucket to set wrong encryption (AES128),,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#23,Body Validation - SSEAlgorithm,vcd0:org1:tu1,P2,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3]}","[(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":""Abc %s123"" % string.punctuation}}]}}",,400,,"{'Error': {'Status': '400', 'Code': 'InvalidEncryptionAlgorithmError', 'Message': 'The encryption request you specified is not valid. The valid value is AES256.', 'Resource': '/api/v1/s3/%s' % self.variables[""bucket_name""]}}",,,"[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",TU1 put encryption configuration of a bucket to set wrong encryption (symbols),,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#24,Body Validation - SSEAlgorithm,vcd0:org1:tu1,P2,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3]}","[(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":random_string(10, unicode_chars())}}]}}",,400,,"{'Error': {'Status': '400', 'Code': 'InvalidEncryptionAlgorithmError', 'Message': 'The encryption request you specified is not valid. The valid value is AES256.', 'Resource': '/api/v1/s3/%s' % self.variables[""bucket_name""]}}",,,"[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",TU1 put encryption configuration of a bucket to set wrong encryption (unicode),,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#25,Body Validation - SSEAlgorithm,vcd0:org1:tu1,P2,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3]}","[(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":''}}]}}",,400,,"{'Error': {'Status': '400', 'Code': 'InvalidEncryptionAlgorithmError', 'Message': 'The encryption request you specified is not valid. The valid value is AES256.', 'Resource': '/api/v1/s3/%s' % self.variables[""bucket_name""]}}",,,"[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]",TU1 put encryption configuration of a bucket to set empty encryption,,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#26,Impact on Other APIs,vcd0:org1:tu1,P1,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.%s"" % timestamp(format=""%Y%m%d%H%M%S%f"")[:-3]}","[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404]),
(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}}",,200,,,,"[(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""put_bucket_acl"", {""Bucket"":self.variables[""bucket_name""], ""AccessControlPolicy"":{""Owner"":{""DisplayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username""), ""ID"":self.get_user_info(""vcd0:org1:tu1"").get(""canonical_id"")}, ""Grants"":[{""Grantee"":{""DisplayName"":self.get_user_info(""vcd0:org1:tu2"").get(""username""), ""ID"":self.get_user_info(""vcd0:org1:tu2"").get(""canonical_id"")},""Permission"":""FULL_CONTROL""}]}}, [200]),
(""vcd0:org1:tu2"", ""S3CompatibleAPI"", ""get_bucket_acl"", {""Bucket"":self.variables[""bucket_name""]}, [200], None, None, None, {""Grants"":[{""Grantee"":{""DisplayName"":self.get_user_info(""vcd0:org1:tu2"").get(""username""), ""ID"": self.get_user_info(""vcd0:org1:tu2"").get(""canonical_id"")}, ""Permission"":""FULL_CONTROL""}, {""Grantee"":{""DisplayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username""), ""ID"": self.get_user_info(""vcd0:org1:tu1"").get(""canonical_id"")}, ""Permission"":""FULL_CONTROL""}], ""Owner"":{""DisplayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username""), ""ID"": self.get_user_info(""vcd0:org1:tu1"").get(""canonical_id"")}}, {""properties"":{""Grants"":{""schema"":{""match"":""unordered_equal""}}}}),
(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""put_bucket_tagging"", {""Bucket"":self.variables[""bucket_name""], ""Tagging"":{""TagSet"":[{'Key': 'k1','Value': 'v1'}]}}, [204]),
(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""get_bucket_tagging"", {""Bucket"":self.variables[""bucket_name""]}, [200], None, None, None, {""TagSet"":[{'Key': 'k1','Value': 'v1'}]}),
(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""delete_bucket_tagging"", {""Bucket"":self.variables[""bucket_name""]}, [204]),
(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204])]","[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","TU1 put encryption configuration of a bucket to enable SSE-S3 and won't affect other bucket operation

Precondition Steps:
1. TU1 create bucket1

Post Validation Steps:
1. TU1 put/get/delete acl and tag of bucket1
2. TU1 delete bucket1

Cleanup Steps:
<<<<<<< HEAD
1. TU1 delete bucket1",,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#27,Header Validation - Content-md5,vcd0:org1:tu1,P0,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.%s"" % timestamp(format=""%Y-%m-%dt%H-%M-%S.%fz"")}","[(""vcd0:org1:ta1"", ""SSECfgAPI"", ""put_sse_config"", {""type"": ""NONE""}, [200]),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404]),
(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}, 'ContentMD5': '%s'%calculate_content_md5('<ServerSideEncryptionConfiguration xmlns=""http://s3.amazonaws.com/doc/2006-03-01/""><Rule><ApplyServerSideEncryptionByDefault><SSEAlgorithm>AES256</SSEAlgorithm></ApplyServerSideEncryptionByDefault></Rule></ServerSideEncryptionConfiguration>')}",,200,,,,"[(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""get_bucket_encryption"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,None,None,{""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":""AES256""}}]}}),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""list_buckets"", {""Filter"":""name==%s"" % self.variables['bucket_name']}, [200],None,None,None, {""owner"":{""id"":self.get_user_info(""vcd0:org1:tu1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username"")},""buckets"":[{""name"":self.variables[""bucket_name""],""creationDate"":datetime.datetime, ""path"":""%s/%s"" % (self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""), self.variables[""bucket_name""]),""tenant"":self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""),""owner"":{""id"":self.get_user_info(""vcd0:org1:tu1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username"")},""region"":self.get_user_info(""vcd0:org1:tu1"").get(""region""),""objectCount"":0,""usedBytes"":0,""lastModified"":datetime.datetime, ""encrypted"":True, ""s3Href"":""%sapi/v1/s3/%s"" % (self.get_oss_url(), self.variables[""bucket_name""])}],""pageInfo"":{""offset"":0,""limit"":1000,""total"":1}}),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""list_objects_v2"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,{'x-vmware-voss-encryption': 'SSE_S3'},None,{""name"":self.variables['bucket_name'], ""keyCount"":0,""maxKeys"":1000, ""truncated"":False,""path"":""%s/%s"" % (self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""), self.variables[""bucket_name""]),""tenant"":self.get_user_info(""vcd0:org1:tu1"").get(""tenant_id""), ""owner"":{""id"":self.get_user_info(""vcd0:org1:tu1"").get(""user_id""), ""displayName"":self.get_user_info(""vcd0:org1:tu1"").get(""username"")},""region"":self.get_user_info(""vcd0:org1:tu1"").get(""region""),""objectCount"":0,""usedBytes"":0,""lastModified"":datetime.datetime,'encrypted':True, ""s3Href"":""%sapi/v1/s3/%s"" % (self.get_oss_url(), self.variables[""bucket_name""]),""objectBrief"":[],""pageInfo"":{""offset"":0,""limit"":1000,""total"":0}}),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""head_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200],None,{'x-vmware-voss-encryption': 'SSE_S3'})]","[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","TU1 put encryption configuration of a bucket to enable SSE-S3 when default tenant encryption is NONE with correct content-md5

Precondition Steps:
1. TU1 create bucket1

Post Validation Steps:
1. TU1 get/head bucket1

Cleanup Steps:
1. TU1 delete bucket1",,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#28,Header Validation - Content-md5,vcd0:org1:tu1,P0,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.%s"" % timestamp(format=""%Y-%m-%dt%H-%M-%S.%fz"")}","[(""vcd0:org1:ta1"", ""SSECfgAPI"", ""put_sse_config"", {""type"": ""NONE""}, [200]),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404]),
(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}, 'ContentMD5': '%s'%calculate_content_md5('<ServerSideEncryptionConfiguration xmlns=""http://s3.amazonaws.com/doc/2006-03-01/""><Rule><ApplyServerSideEncryptionByDefault><SSEAlgorithm>AES257</SSEAlgorithm></ApplyServerSideEncryptionByDefault></Rule></ServerSideEncryptionConfiguration>')}",,400,,"{'Error': {'details': {'CalculatedDigest': '5bZurju84n5lUGMQ6mrGXQ==', 'ExpectedDigest': 'hQGixd/OUIjmXt41625OQw=='}, 'Status': '400', 'Code': 'BadDigest', 'Message': 'The Content-MD5 you specified did not match what we received.', 'Resource': str}}",,"[(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""get_bucket_encryption"", {""Bucket"":self.variables[""bucket_name""]}, [404])]","[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","TU1 put encryption configuration of a bucket to enable SSE-S3 when default tenant encryption is NONE with incorrect content-md5

Precondition Steps:
1. TU1 create bucket1

Post Validation Steps:
1. TU1 get/head bucket1

Cleanup Steps:
1. TU1 delete bucket1",,,
TestBucketEncryptionS3Compatible#test01_put_bucket_encryption#29,Header Validation - Content-md5,vcd0:org1:tu1,P0,S3CompatibleAPI,,,"{""bucket_name"":""vcd0.org1.tu1.s3.ext.put-encryption.%s"" % timestamp(format=""%Y-%m-%dt%H-%M-%S.%fz"")}","[(""vcd0:org1:ta1"", ""SSECfgAPI"", ""put_sse_config"", {""type"": ""NONE""}, [200]),
(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404]),
(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""create_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [200, 409])]","{""Bucket"":self.variables[""bucket_name""],""ServerSideEncryptionConfiguration"":{""Rules"":[{""ApplyServerSideEncryptionByDefault"":{""SSEAlgorithm"":'AES256'}}]}, 'ContentMD5': 'invalid'}",,400,,"{'Error': {'details': {'Content-MD5': 'invalid'}, 'Status': '400', 'Code': 'InvalidDigest', 'Message': 'The Content-MD5 you specified is not valid.', 'Resource': str}}",,"[(""vcd0:org1:tu1"", ""S3CompatibleAPI"", ""get_bucket_encryption"", {""Bucket"":self.variables[""bucket_name""]}, [404])]","[(""vcd0:org1:tu1"", ""S3ExtendedJsonAPI"", ""force_delete_bucket"", {""Bucket"":self.variables[""bucket_name""]}, [204, 404])]","TU1 put encryption configuration of a bucket to enable SSE-S3 when default tenant encryption is NONE with invalid content-md5

Precondition Steps:
1. TU1 create bucket1

Post Validation Steps:
1. TU1 get/head bucket1

Cleanup Steps:
1. TU1 delete bucket1",,,